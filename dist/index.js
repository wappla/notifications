import{createContext as f}from"react";var a=f(void 0),d=a.Provider;var n=class{events;constructor(){this.events={}}addEventListener(t,i){typeof this.events[t]>"u"&&(this.events[t]=[]),this.events[t].push(i)}removeEventListener(t,i){if(typeof this.events[t]<"u"){let e=this.events[t].indexOf(i);e>-1&&this.events[t].splice(e,1)}}dispatchEvent(t){let{type:i}=t;typeof this.events[i]<"u"&&this.events[i].forEach(e=>{e(t)})}};var h=5e3,s=class extends n{defaultDuration;notifications;constructor(t=h){super(),this.notifications=[],this.defaultDuration=t}createNotification(t,i=this.defaultDuration,e=Date.now()){return{data:t,duration:i,createdAt:e}}removeNotification(t){let i=this.notifications.indexOf(t);i!==-1&&this.notifications.splice(i,1),this.dispatchEvent(new CustomEvent("changed")),this.dispatchEvent(new CustomEvent("removed",{detail:t}))}dispatchNotification(t){this.notifications.push(t),t.duration&&setTimeout(()=>{this.removeNotification(t)},t.duration),this.dispatchEvent(new CustomEvent("changed")),this.dispatchEvent(new CustomEvent("added",{detail:t}))}dispatch(t,i,e){let c=this.createNotification(t,i,e);this.dispatchNotification(c)}subscribe(t){return this.addEventListener("changed",()=>t([...this.notifications])),()=>{this.removeEventListener("changed",()=>t([...this.notifications]))}}},o=null,p=()=>(o===null&&(o=new s),o);export{s as NotificationDispatcher,a as NotificationsContext,d as NotificationsProvider,p as getNotificationDispatcher};
//# sourceMappingURL=index.js.map