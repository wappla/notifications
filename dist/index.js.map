{"version":3,"sources":["../src/NotificationsProvider.tsx","../src/EventTarget.ts","../src/NotificationDispatcher.ts"],"sourcesContent":["import { createContext } from 'react'\nimport { NotificationDispatcher } from './NotificationDispatcher'\n\nexport const NotificationsContext = createContext<NotificationDispatcher | undefined>(undefined)\n\nexport const NotificationsProvider = NotificationsContext.Provider\n","// Remove this polyfill when the issue below is resolved\n// https://github.com/jsdom/jsdom/issues/2156\n\ntype Event = {\n    type: string\n}\n\nexport default class EventTargetPolyfill {\n    events: any\n\n    constructor() {\n        this.events = {}\n    }\n\n    addEventListener(type: string, listener: () => void) {\n        if (typeof this.events[type] === 'undefined') {\n            this.events[type] = []\n        }\n        this.events[type].push(listener)\n    }\n\n    removeEventListener(type: string, listener: () => void) {\n        if (typeof this.events[type] !== 'undefined') {\n            const index = this.events[type].indexOf(listener)\n            if (index > -1) {\n                this.events[type].splice(index, 1)\n            }\n        }\n    }\n\n    dispatchEvent(event: Event) {\n        const { type } = event\n        if (typeof this.events[type] !== 'undefined') {\n            this.events[type].forEach((listener: any) => {\n                listener(event)\n            })\n        }\n    }\n}\n","import EventTarget from './EventTarget'\n\nconst DEFAULT_DURATION = 5000\n\nexport type NotificationData = {\n    type: string\n    title: string\n    message?: string\n}\n\nexport type Notification = {\n    duration: number\n    createdAt: number\n    data: NotificationData\n}\n\nexport class NotificationDispatcher extends EventTarget {\n    defaultDuration: number\n    notifications: Notification[]\n\n    constructor(defaultDuration = DEFAULT_DURATION) {\n        super()\n        this.notifications = []\n        this.defaultDuration = defaultDuration\n    }\n\n    createNotification(\n        data: NotificationData,\n        duration = this.defaultDuration,\n        createdAt = Date.now()\n    ): Notification {\n        return {\n            data,\n            duration,\n            createdAt,\n        }\n    }\n\n    removeNotification(notification: Notification) {\n        const index = this.notifications.indexOf(notification)\n        if (index !== -1) {\n            this.notifications.splice(index, 1)\n        }\n        this.dispatchEvent(new CustomEvent('changed'))\n        this.dispatchEvent(new CustomEvent('removed', { detail: notification }))\n    }\n\n    dispatchNotification(notification: Notification) {\n        this.notifications.push(notification)\n        if (notification.duration) {\n            setTimeout(() => {\n                this.removeNotification(notification)\n            }, notification.duration)\n        }\n        this.dispatchEvent(new CustomEvent('changed'))\n        this.dispatchEvent(new CustomEvent('added', { detail: notification }))\n    }\n\n    dispatch(data: NotificationData, duration?: number, createdAt?: number) {\n        const notification = this.createNotification(data, duration, createdAt)\n        this.dispatchNotification(notification)\n    }\n\n    subscribe(listener: (notifications: Notification[]) => void) {\n        this.addEventListener('changed', () =>\n            listener([...this.notifications])\n        )\n        return () => {\n            this.removeEventListener('changed', () =>\n                listener([...this.notifications])\n            )\n        }\n    }\n}\n\nlet notificationDispatcher: any = null\nexport const getNotificationDispatcher = (): NotificationDispatcher => {\n    if (notificationDispatcher === null) {\n        notificationDispatcher = new NotificationDispatcher()\n        return notificationDispatcher\n    }\n    return notificationDispatcher\n}\n"],"mappings":"AAAA,OAAS,iBAAAA,MAAqB,QAGvB,IAAMC,EAAuBD,EAAkD,MAAS,EAElFE,EAAwBD,EAAqB,SCE1D,IAAqBE,EAArB,KAAyC,CACrC,OAEA,aAAc,CACV,KAAK,OAAS,CAAC,CACnB,CAEA,iBAAiBC,EAAcC,EAAsB,CAC7C,OAAO,KAAK,OAAOD,CAAI,EAAM,MAC7B,KAAK,OAAOA,CAAI,EAAI,CAAC,GAEzB,KAAK,OAAOA,CAAI,EAAE,KAAKC,CAAQ,CACnC,CAEA,oBAAoBD,EAAcC,EAAsB,CACpD,GAAI,OAAO,KAAK,OAAOD,CAAI,EAAM,IAAa,CAC1C,IAAME,EAAQ,KAAK,OAAOF,CAAI,EAAE,QAAQC,CAAQ,EAC5CC,EAAQ,IACR,KAAK,OAAOF,CAAI,EAAE,OAAOE,EAAO,CAAC,CAEzC,CACJ,CAEA,cAAcC,EAAc,CACxB,GAAM,CAAE,KAAAH,CAAK,EAAIG,EACb,OAAO,KAAK,OAAOH,CAAI,EAAM,KAC7B,KAAK,OAAOA,CAAI,EAAE,QAASC,GAAkB,CACzCA,EAASE,CAAK,CAClB,CAAC,CAET,CACJ,ECpCA,IAAMC,EAAmB,IAcZC,EAAN,cAAqCC,CAAY,CACpD,gBACA,cAEA,YAAYC,EAAkBH,EAAkB,CAC5C,MAAM,EACN,KAAK,cAAgB,CAAC,EACtB,KAAK,gBAAkBG,CAC3B,CAEA,mBACIC,EACAC,EAAW,KAAK,gBAChBC,EAAY,KAAK,IAAI,EACT,CACZ,MAAO,CACH,KAAAF,EACA,SAAAC,EACA,UAAAC,CACJ,CACJ,CAEA,mBAAmBC,EAA4B,CAC3C,IAAMC,EAAQ,KAAK,cAAc,QAAQD,CAAY,EACjDC,IAAU,IACV,KAAK,cAAc,OAAOA,EAAO,CAAC,EAEtC,KAAK,cAAc,IAAI,YAAY,SAAS,CAAC,EAC7C,KAAK,cAAc,IAAI,YAAY,UAAW,CAAE,OAAQD,CAAa,CAAC,CAAC,CAC3E,CAEA,qBAAqBA,EAA4B,CAC7C,KAAK,cAAc,KAAKA,CAAY,EAChCA,EAAa,UACb,WAAW,IAAM,CACb,KAAK,mBAAmBA,CAAY,CACxC,EAAGA,EAAa,QAAQ,EAE5B,KAAK,cAAc,IAAI,YAAY,SAAS,CAAC,EAC7C,KAAK,cAAc,IAAI,YAAY,QAAS,CAAE,OAAQA,CAAa,CAAC,CAAC,CACzE,CAEA,SAASH,EAAwBC,EAAmBC,EAAoB,CACpE,IAAMC,EAAe,KAAK,mBAAmBH,EAAMC,EAAUC,CAAS,EACtE,KAAK,qBAAqBC,CAAY,CAC1C,CAEA,UAAUE,EAAmD,CACzD,YAAK,iBAAiB,UAAW,IAC7BA,EAAS,CAAC,GAAG,KAAK,aAAa,CAAC,CACpC,EACO,IAAM,CACT,KAAK,oBAAoB,UAAW,IAChCA,EAAS,CAAC,GAAG,KAAK,aAAa,CAAC,CACpC,CACJ,CACJ,CACJ,EAEIC,EAA8B,KACrBC,EAA4B,KACjCD,IAA2B,OAC3BA,EAAyB,IAAIT,GACtBS","names":["createContext","NotificationsContext","NotificationsProvider","EventTargetPolyfill","type","listener","index","event","DEFAULT_DURATION","NotificationDispatcher","EventTargetPolyfill","defaultDuration","data","duration","createdAt","notification","index","listener","notificationDispatcher","getNotificationDispatcher"]}